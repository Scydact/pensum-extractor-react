{"version":3,"file":"static/js/40.672b4c87.chunk.js","mappings":"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","sources":["lib/fetch-cors.ts","extractor/unapec.ts"],"sourcesContent":["\r\n/** List of CORS proxies.\r\n * This allows this thing to run without backend. */\r\n// TODO: Add more? https://gist.github.com/jimmywarting/ac1be6ea0297c16c477e17f8fbe51347\r\nexport const CORS_PROXIES = [\r\n  '',                                       // no proxy\r\n  'https://api.allorigins.win/raw?url=',\r\n  'https://yacdn.org/serve/',\r\n  'https://cors-anywhere.herokuapp.com/',   // has request limit (200 per hour)\r\n  'https://crossorigin.me/',\r\n  'https://cors-proxy.htmldriven.com/?url=',// Fails with CORS (what!?)\r\n  'https://thingproxy.freeboard.io/fetch/', // problems with https requests\r\n  'http://www.whateverorigin.org/get?url=', // problems with https requests, deprecated?\r\n];\r\n\r\ntype RequestCallback = (\r\n  state: 'attempt' | 'request' | 'success' | 'error',\r\n  proxy: string,\r\n  proxyId: number,\r\n) => any;\r\n\r\n/**\r\n *\r\n * @param {String} url address for the HTML to fetch\r\n * @param {String} cacheOpt cache policy, defaults to force-cache,\r\n * but if cache must be reloaded, do 'relaod'.\r\n *\r\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Request/cache\r\n * @return {String} the resulting HTML string fragment\r\n */\r\nexport default async function fetchCORS(\r\n  /** URL to request */\r\n  url: string,\r\n  /** Fetch option headers of the request */\r\n  opts: RequestInit = {},\r\n  /** */\r\n  currentProxyCallback?: RequestCallback,\r\n  /** Proxy to use, if any. \r\n   * Can be a URL or an index to CORS_PROXIES.\r\n   * @example\r\n   * ['https://api.allorigins.win/raw?url='] // use allorigins.win\r\n   * [''] // Use no proxy\r\n   * ['', 'https://api.allorigins.win/raw?url='] // Check for no proxy first, then allorigins.\r\n   */\r\n  proxies = CORS_PROXIES\r\n) {\r\n  /** Current proxy ID */\r\n  let currentProxyIdx = 0;\r\n  while (currentProxyIdx < proxies.length) {\r\n\r\n    // Get current proxy\r\n    const proxy = proxies[currentProxyIdx];\r\n    \r\n    const startTime = new Date().getTime();\r\n    const currUrl = proxy + url;\r\n\r\n    /* Controller to cancel the fetch after a timeout. */\r\n    const controller = new AbortController();\r\n    const signal = controller.signal;\r\n    opts.signal = signal;\r\n    \r\n    const timeoutId = setTimeout(() => {\r\n      controller.abort();\r\n      console.warn('Timed out!');\r\n    }, 4e3);\r\n\r\n    // \r\n    try {\r\n      if (currentProxyCallback)\r\n        currentProxyCallback('attempt', proxy, currentProxyIdx);\r\n\r\n      var response = await fetch(currUrl, opts);\r\n\r\n      if (currentProxyCallback)\r\n        currentProxyCallback('request', proxy, currentProxyIdx);\r\n\r\n      clearTimeout(timeoutId);\r\n      if (response.ok) {\r\n        const stopTime = new Date().getTime();\r\n        console.info(`CORS proxy '${currUrl}' succeeded in ${stopTime - startTime} ms.'`);\r\n\r\n        if (currentProxyCallback)\r\n          currentProxyCallback('success', proxy, currentProxyIdx);\r\n\r\n        return await response.text();\r\n      } else {\r\n        throw new Error('Response was not OK!');\r\n      }\r\n    } \r\n    \r\n    catch (err) {\r\n      clearTimeout(timeoutId);\r\n      const stopTime = new Date().getTime();\r\n      console.warn(`CORS proxy '${proxy}' failed in ${stopTime - startTime}ms.'`);\r\n      console.warn(err);\r\n\r\n      if (currentProxyCallback)\r\n        currentProxyCallback('error', proxy, currentProxyIdx);\r\n    } \r\n    \r\n    finally {\r\n      ++currentProxyIdx;\r\n    }\r\n  }\r\n  return null;\r\n}","import { convertPensum2 } from \"functions/pensum-converter\";\r\nimport fetchCORS from \"lib/fetch-cors\";\r\nimport { japaneseDateFormat } from \"lib/format-utils\";\r\n\r\n/** Fetches a pensum from UNAPEC. */\r\nexport default async function fetchPensum(\r\n  code: string,\r\n  requestCallback: Parameters<typeof fetchCORS>[2],\r\n  api_url = 'https://servicios.unapec.edu.do/pensum/Main/Detalles/') {\r\n  const url = api_url + code;\r\n\r\n  const opts: RequestInit = { cache: 'force-cache' };\r\n  const text = await fetchCORS(url, opts, requestCallback);\r\n\r\n  if (!text) return null;\r\n\r\n  const parser = new DOMParser();\r\n  const doc = parser.parseFromString(text, 'text/xml');\r\n\r\n  const pensum = extractPensum(doc, url);\r\n  return pensum;\r\n}\r\n\r\n/**\r\n * Extracts the pensum data from the given DOM node.\r\n * @param node DOM node. Can be made from the GET request using `new DOMParser().parseFromString(msg, 'text/xml');`\r\n */\r\nexport function extractPensum(node: Document, url: string) {\r\n  // Legacy pensum\r\n  try {\r\n    const old = legactExtractPensum(node);\r\n    const pensum = convertPensum2(old, 'unapec');\r\n\r\n    pensum.fetchDate = japaneseDateFormat(new Date());\r\n    pensum.src = {\r\n      type: 'online',\r\n      date: pensum.fetchDate,\r\n      url,\r\n    }\r\n\r\n    return pensum;\r\n  } catch (err) {\r\n    console.error(err);\r\n    return null;\r\n  }\r\n}\r\n\r\n/** Directly taken from the original project */\r\nexport function legactExtractPensum(node: Document): Pensum.Save.Legacy.Pensum2 {\r\n  let out: Pensum.Save.Legacy.Pensum2 = {\r\n    carrera: '',\r\n    codigo: '',\r\n    vigencia: '',\r\n    infoCarrera: [],\r\n    cuats: [],\r\n    version: 2,\r\n  };\r\n\r\n  // Verify if pensum is actually valid data\r\n  if (\r\n    node.getElementsByClassName('contPensum').length === 0 ||\r\n    node.getElementsByClassName('contPensum')[0].children.length < 2\r\n  ) {\r\n    throw new Error('Document has no pensum inside!');\r\n  }\r\n\r\n  // Extract basic data\r\n  var cabPensum = node.getElementsByClassName('cabPensum')[0];\r\n  if (!cabPensum) throw new Error('Unable to get table element.');\r\n\r\n  out.carrera = cabPensum?.firstElementChild?.textContent?.trim() || '';\r\n\r\n  var pMeta = cabPensum.getElementsByTagName('p')[0].children;\r\n  out.codigo = pMeta[0]?.textContent?.trim() || '';\r\n  out.vigencia = pMeta[1]?.textContent?.trim() || '';\r\n\r\n  if (out.carrera === '') throw new Error('Unable to get pensum name');\r\n  if (out.codigo === '') throw new Error('Unable to get pensum code');\r\n\r\n  // Extract infoCarrera\r\n  var infoCarrera = node.getElementsByClassName('infoCarrera')[0].children;\r\n  for (let i = 0; i < infoCarrera.length; ++i) {\r\n    out.infoCarrera.push(\r\n      infoCarrera[i]?.textContent?.replace(/\\n/g, ' ')?.trim() || ''\r\n    );\r\n  }\r\n\r\n  // Extract cuats\r\n  var cuatrim = node.getElementsByClassName('cuatrim');\r\n\r\n  for (let i = 0; i < cuatrim.length; ++i) {\r\n    /**\r\n     * @type {HTMLTableElement}\r\n     */\r\n    let currentCuatTable = cuatrim[i];\r\n    let rows = currentCuatTable.children;\r\n\r\n    let outCuat: Pensum.Save.Legacy.Mat[] = [];\r\n\r\n    for (let j = 1; j < rows.length; ++j) {\r\n      let outMat: Pensum.Save.Legacy.Mat = {\r\n        codigo: '',\r\n        asignatura: '',\r\n        creditos: 0,\r\n      };\r\n\r\n      const prereq: string[] = [];\r\n      const prereqExtra: string[] = [];\r\n\r\n      outMat.prereq = prereq;\r\n      outMat.prereqExtra = prereqExtra;\r\n\r\n\r\n      let currentRows = rows[j].children;\r\n      outMat.codigo = currentRows[0]?.textContent?.trim() || '';\r\n      outMat.asignatura = currentRows[1]?.textContent?.trim() || '';\r\n      outMat.creditos = parseFloat(currentRows[2]?.textContent || '-Infinity');\r\n\r\n      if (outMat.codigo === '') throw new Error(`Unable to get code for mat ${outMat.asignatura} @ cuat ${i + 1}`);\r\n      if (outMat.asignatura === '') throw new Error(`Unable to get name for mat ${outMat.codigo} @ cuat ${i + 1}`);\r\n      if (outMat.creditos === -Infinity) throw new Error(`Unable to get creds for mat ${outMat.codigo}:${outMat.asignatura} @ cuat ${i + 1}`);\r\n\r\n      // Prerequisitos\r\n      var splitPrereq = (currentRows[3]?.textContent || '')\r\n        .replace(/\\n/g, ',')\r\n        .split(',')\r\n        .map((x) => x.trim())\r\n        .filter((e) => e !== '');\r\n\r\n      for (let i = 0; i < splitPrereq.length; i++) {\r\n        let a = splitPrereq[i];\r\n        if (a.length < 8) prereq.push(a);\r\n        else prereqExtra.push(a);\r\n      }\r\n\r\n      outCuat.push(outMat);\r\n    }\r\n    out.cuats.push(outCuat);\r\n  }\r\n  return out;\r\n}\r\n\r\n"],"names":["CORS_PROXIES","fetchCORS","url","opts","currentProxyCallback","proxies","currentProxyIdx","proxy","startTime","Date","getTime","currUrl","controller","AbortController","signal","timeoutId","setTimeout","abort","console","warn","fetch","response","clearTimeout","ok","stopTime","info","text","Error","length","fetchPensum","code","requestCallback","api_url","cache","parser","DOMParser","doc","parseFromString","pensum","extractPensum","node","old","legactExtractPensum","convertPensum2","fetchDate","japaneseDateFormat","src","type","date","err","error","out","carrera","codigo","vigencia","infoCarrera","cuats","version","getElementsByClassName","children","cabPensum","firstElementChild","textContent","trim","pMeta","getElementsByTagName","i","push","replace","cuatrim","rows","outCuat","j","outMat","asignatura","creditos","prereq","prereqExtra","currentRows","parseFloat","Infinity","splitPrereq","split","map","x","filter","e","a"],"sourceRoot":""}